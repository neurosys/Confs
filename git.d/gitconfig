# Git stash
#   git stash [save <name>]
#   git stash list
#   git stash [apply <idx from $(git stash list)>
#   git stash drop <idx from $(git stash list)>
#   git stash clear # Removes everything from stash



# In order to store the credentials into an repository
# > git config credential.helper store

#[includeIf "gitdir:~/learn/test_git_includeif/"]
#    path = ~/learn/gitcfg-learn

# When `go mod tidy` fails and says something along: 
#       "fatal: could not read Username for 'https://github.com': terminal prompts disabled
# Run this line to fix it
# go env -w GOPRIVATE="github.com/<my-company>/*"
#

#[url "git@github.com:/path/to/repo"]
#    insteadOf = https://github.com/path/to/repo


[pager]
    # Don't show the list of branches in a pager
    branch = false
    tag = true

[include]
    path = ~/.git_local_accounts


[core]
    editor = vim
    # Use less as a pager -x4 is for the number of spaces
    pager = less -x4
    #pager = view -

    # Use lf as line ending
    eol = lf
    autocrlf = input

[merge]
    tool = kdiff3
    #tool = vimdiff
    #tool = meld

[mergetool]
    trustExitCode = false

[diff]
    guitool = kdiff3

[difftool]
    trustExitCode = false

[pull]
    rebase = true

[branch]
    # git branch, git checkout -b imply --track option
    autosetupmerge = always

    # git branches should be rebased upon git pull
    autosetuprebase = always


[color]
    diff = auto
    status = auto
    branch = auto
    interactive = auto
    # Detect if the terminal supports colors and don't 
    ui = auto
    # If using vim as pager (view) it has its own syntax highlight
    pager = true

    #ui = always
    #ui = never
    #

[color "status"]
    added = green
    changed = red bold
    untracked = magenta bold
    header = white

[color "branch"]
    remote = yellow
    local = green
    unmerged = red bold

#[http]
#    proxy = http://<usr>:<pwd>@<proxy fqdn>:<port>

[alias]
    ss = status -sb -uno
    adu = add -u
	mg  = mergetool --no-prompt
    mt  = mergetool --no-prompt
    s = status

    co = checkout
    com = commit

    # Short, decorated log
    # Optionsal --date=relative
    ls = log --date=short --graph --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%C(cyan)%cd\\ %Creset%s%Cgreen\\ [%cn]" --decorate 

    # Show a log with files changed in that commit
    ll  = !git ls --name-only && 0

    # Show a normal log with diff included (-p means patch)
    lld = log -p

    # adding -p would transform it to log -p
    wc = whatchanged

    # --date=short
    # --date=relative
    l = log --pretty=format:"%C(yellow)%h\\ %C(green)%cn\\ %C(cyan)%cd%Creset\\ %s" --date=relative

    # Show the heat map of a project (which is are the most edited files)
    code-changes = "!git log --format=format: --name-only | egrep -v '^$' | sort | uniq -c | sort -rg | head -10"
    cc = "!git code-changes"
    




#=====================================
# HELP
#=====================================

# git log <branchA>..<branchB>
#   Shows all the commits in branch B that are not in branch A.
#   Otherwords, what commits would I add into A if I merge brnach B in it

# git diff <brahchA>..<branchB>
#   Shows the diff between branch A and B
#   Otherwords, what changes would I add into A if I merge brnach B in it

# git log <branchA>...<branchB> [--left-right]
#   (notice there are three dots)
#   Shows the commits that are in A or in B, but not in both
#   Otherwords: It will show the commits in A and B, until the diverging point
[safe]
	directory = *

