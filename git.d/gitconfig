# In order to store the credentials into an repository
# > git config credential.helper store
[credential "http://github.com"]
	name = NeuroSys
    username = neurosys
	email = you@example.com

[user]
   name = NeuroSys
   username = neurosys
   email = you@example.com

[pager]
    # Don't show the list of branches in a pager
	branch = false

[include]
    path = ~/.git_local_accounts


[core]
        editor = vim
        pager = less -x4

[merge]
        tool = kdiff3

[mergetool "kdiff3"]
        trustExitCode = false

[diff]
        guitool = kdiff3

[difftool "kdiff3"]
        trustExitCode = false

[pull]
    rebase = true

[branch]
    # git branch, git checkout -b imply --track option
    autosetupmerge = always

    # git branches should be rebased upon git pull
    autosetuprebase = always


[color]
    diff = auto
    status = auto
    branch = auto
    interactive = auto
    ui = true
    pager = true

    #ui = always
    #ui = never
    #

[color "status"]
    added = green
    changed = red bold
    untracked = magenta bold

[color "branch"]
    remote = yellow

#[http]
#    proxy = http://<usr>:<pwd>@<proxy fqdn>:<port>

[alias]
	ss = status -sb -uno
    adu = add -u
	mg  = mergetool --no-prompt

    # Short, decorated log
    # Optionsal --date=relative
    ls = log --date=short --graph --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%C(cyan)%cd\\ %Creset%s%Cgreen\\ [%cn]" --decorate 

    # Show a log with files changed in that commit
    ll  = !git ls --name-only && 0

    # Show a normal log with diff included (-p means patch)
    lld = log -p

    # adding -p would transform it to log -p
    wc = whatchanged

    # --date=short
    # --date=relative
    l = log --pretty=format:"%C(yellow)%h\\ %C(green)%cn\\ %C(cyan)%cd%Creset\\ %s" --date=relative
    




#=====================================
# HELP
#=====================================

# git log <branchA>..<branchB>
#   Shows all the commits in branch B that are not in branch A.
#   Otherwords, what commits would I add into A if I merge brnach B in it

# git diff <brahchA>..<branchB>
#   Shows the diff between branch A and B
#   Otherwords, what changes would I add into A if I merge brnach B in it

# git log <branchA>...<branchB> [--left-right]
#   (notice there are three dots)
#   Shows the commits that are in A or in B, but not in both
#   Otherwords: It will show the commits in A and B, until the diverging point
